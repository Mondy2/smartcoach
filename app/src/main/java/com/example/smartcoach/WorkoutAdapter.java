package com.example.smartcoach;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.example.smartcoach.models.AutoGeneratedWorkout;

import java.util.List;

public class WorkoutAdapter extends RecyclerView.Adapter<WorkoutAdapter.WorkoutViewHolder> {
    private List<AutoGeneratedWorkout> workouts;

    public WorkoutAdapter(List<AutoGeneratedWorkout> workouts) {
        this.workouts = workouts;
    }

    @NonNull
    @Override
    public WorkoutViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_workout, parent, false);
        return new WorkoutViewHolder(view);
    }

    @Override
    public void onBindViewHolder(@NonNull WorkoutViewHolder holder, int position) {
        AutoGeneratedWorkout workout = workouts.get(position);

        // Установка даты и цели тренировки
        holder.dateText.setText(workout.getDate());
        holder.goalText.setText("Goal: " + workout.getWorkoutGoal());

        // Определение группы мышц на основе упражнений
        String muscleGroup = determineMuscleGroup(workout.getSuggestedWorkout());
        holder.muscleGroupText.setText(muscleGroup);

        // Установка изображения в зависимости от группы мышц
        holder.setMuscleImage(muscleGroup);
    }

    @Override
    public int getItemCount() {
        return workouts.size();
    }

    public static class WorkoutViewHolder extends RecyclerView.ViewHolder {
        TextView muscleGroupText, dateText, goalText;
        ImageView muscleImage;

        public WorkoutViewHolder(@NonNull View itemView) {
            super(itemView);
            muscleGroupText = itemView.findViewById(R.id.muscleGroupText);
            dateText = itemView.findViewById(R.id.dateText);
            goalText = itemView.findViewById(R.id.goalText);
            muscleImage = itemView.findViewById(R.id.muscleImage);
        }

        public void setMuscleImage(String muscleGroup) {
            switch (muscleGroup.toLowerCase()) {
                case "chest":
                    muscleImage.setImageResource(R.drawable.ic_chest);
                    break;
                case "back":
                    muscleImage.setImageResource(R.drawable.ic_back);
                    break;
                case "arms":
                    muscleImage.setImageResource(R.drawable.ic_arms);
                    break;
                case "legs":
                    muscleImage.setImageResource(R.drawable.ic_legs);
                    break;
                case "abs":
                    muscleImage.setImageResource(R.drawable.ic_abs);
                    break;
                case "shoulders":
                    muscleImage.setImageResource(R.drawable.ic_shoulders);
                    break;
                default:
                    muscleImage.setImageResource(R.drawable.ic_default_workout);
                    break;
            }
        }
    }

    private String determineMuscleGroup(String suggestedWorkout) {
        // Простая логика определения группы мышц на основе упражнений
        if (suggestedWorkout.toLowerCase().contains("push-ups") || suggestedWorkout.toLowerCase().contains("bench press")) {
            return "Chest";
        } else if (suggestedWorkout.toLowerCase().contains("pull-ups") || suggestedWorkout.toLowerCase().contains("deadlifts")) {
            return "Back";
        } else if (suggestedWorkout.toLowerCase().contains("bicep curls") || suggestedWorkout.toLowerCase().contains("tricep dips")) {
            return "Arms";
        } else if (suggestedWorkout.toLowerCase().contains("squats") || suggestedWorkout.toLowerCase().contains("lunges")) {
            return "Legs";
        } else if (suggestedWorkout.toLowerCase().contains("plank") || suggestedWorkout.toLowerCase().contains("crunches")) {
            return "Abs";
        } else if (suggestedWorkout.toLowerCase().contains("shoulder press") || suggestedWorkout.toLowerCase().contains("lateral raises")) {
            return "Shoulders";
        } else {
            return "Full Body";
        }
    }
}
/*package com.example.smartcoach;

import android.content.Context;
import android.content.Intent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.example.smartcoach.R;
import com.example.smartcoach.models.AutoGeneratedWorkout;

import java.util.List;

public class WorkoutAdapter extends RecyclerView.Adapter<WorkoutAdapter.ViewHolder> {
    private final List<AutoGeneratedWorkout> workouts;

    public WorkoutAdapter(List<AutoGeneratedWorkout> workouts) {
        this.workouts = workouts;
    }

    @NonNull
    @Override
    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View view = LayoutInflater.from(parent.getContext())
                .inflate(R.layout.item_workout, parent, false);
        return new ViewHolder(view);
    }

    @Override
    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {
        AutoGeneratedWorkout w = workouts.get(position);

        holder.date.setText(w.getDate());

        holder.date.setOnClickListener(v -> {
            Context context = v.getContext();
            Intent intent = new Intent(context, WorkoutDetailActivity.class);
            intent.putExtra(WorkoutDetailActivity.EXTRA_WORKOUT, w);
            context.startActivity(intent);
        });

    }

    @Override
    public int getItemCount() {
        return workouts.size();
    }

    static class ViewHolder extends RecyclerView.ViewHolder {
        TextView date;

        ViewHolder(@NonNull View itemView) {
            super(itemView);
            date = itemView.findViewById(R.id.tvDate);
        }
    }
}
*/