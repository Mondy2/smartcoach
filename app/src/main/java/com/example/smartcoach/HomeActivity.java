package com.example.smartcoach;

import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.GridLayout;
import android.widget.HorizontalScrollView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import androidx.activity.EdgeToEdge;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.graphics.Insets;
import androidx.core.view.ViewCompat;
import androidx.core.view.WindowInsetsCompat;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.example.smartcoach.models.AutoGeneratedWorkout;
import com.google.android.material.bottomnavigation.BottomNavigationView;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

public class HomeActivity extends AppCompatActivity {

    private RecyclerView workoutsRecyclerView;
    private WorkoutAdapter workoutAdapter;
    private List<AutoGeneratedWorkout> workouts = new ArrayList<>();


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        EdgeToEdge.enable(this);
        setContentView(R.layout.activity_home);
        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -> {
            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);
            return insets;
        });

        // Настройка календаря
        setupCalendar();

        // Настройка RecyclerView для тренировок
        workoutsRecyclerView = findViewById(R.id.workouts_recycler_view);
        workoutsRecyclerView.setLayoutManager(new LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false));
        workoutAdapter = new WorkoutAdapter(workouts, workout -> {
            // Переход на WorkoutDetailActivity при нажатии на карточку
            Intent intent = new Intent(HomeActivity.this, WorkoutDetailActivity.class);
            intent.putExtra("WORKOUT_ID", workout.getAutoWorkoutID());
            intent.putExtra("USER_ID", workout.getUserID());
            startActivity(intent);
        }, WorkoutAdapter.VIEW_TYPE_HOME); // Передаем VIEW_TYPE_HOME
        workoutsRecyclerView.setAdapter(workoutAdapter);

        // Загрузка тренировок из Firebase
        loadUserWorkouts();

        // Настройка популярных целей
        setupPopularGoals();

        // Настройка нижней навигации
        BottomNavigationView bottomNavigationView = findViewById(R.id.bottom_navigation);
        bottomNavigationView.setSelectedItemId(R.id.nav_home);
        bottomNavigationView.setOnNavigationItemSelectedListener(item -> {
            int itemId = item.getItemId();
            if (itemId == R.id.nav_home) {
                Log.d("HomeActivity", "Home selected");
                return true;
            } else if (itemId == R.id.nav_generate_workout) {
                Log.d("HomeActivity", "Generate Workout selected");
                startActivity(new Intent(HomeActivity.this, GenerateWorkoutActivity.class));
                finish();
                return true;
            } else if (itemId == R.id.nav_settings) {
                Log.d("HomeActivity", "Settings selected");
                startActivity(new Intent(HomeActivity.this, SettingsActivity.class));
                finish();
                return true;
            }
            return false;
        });
    }



    private void setupCalendar() {
        LinearLayout calendarContainer = findViewById(R.id.calendar_container);
        calendarContainer.removeAllViews();

        Calendar calendar = Calendar.getInstance();
        SimpleDateFormat dayFormat = new SimpleDateFormat("d", Locale.getDefault());
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());

        String todayDate = dateFormat.format(calendar.getTime());

        // Рассчитываем ширину каждого элемента, чтобы 7 дней занимали всю ширину
        int screenWidth = getResources().getDisplayMetrics().widthPixels;
        int padding = 32; // 16dp с каждой стороны (paddingHorizontal="16dp")
        int itemWidth = (screenWidth - padding) / 7;

        for (int i = 0; i < 7; i++) {
            TextView dateTextView = new TextView(this);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    itemWidth,
                    LinearLayout.LayoutParams.WRAP_CONTENT);
            dateTextView.setLayoutParams(params);
            dateTextView.setTextSize(18);
            dateTextView.setGravity(View.TEXT_ALIGNMENT_CENTER);

            String day = dayFormat.format(calendar.getTime());
            String fullDate = dateFormat.format(calendar.getTime());
            dateTextView.setText(day);

            if (fullDate.equals(todayDate)) {
                dateTextView.setTextColor(getResources().getColor(R.color.dark_gray));
                dateTextView.setBackgroundResource(android.R.drawable.btn_default);
            } else {
                dateTextView.setTextColor(getResources().getColor(R.color.gray));
            }

            calendarContainer.addView(dateTextView);
            calendar.add(Calendar.DAY_OF_MONTH, 1);
        }

        calendarContainer.post(() -> {
            HorizontalScrollView scrollView = findViewById(R.id.calendar_scroll);
            scrollView.smoothScrollTo(0, 0);
        });
    }

    private void loadUserWorkouts() {
        String userId = FirebaseAuth.getInstance().getCurrentUser().getUid();
        DatabaseReference ref = FirebaseDatabase.getInstance()
                .getReference("AutoGeneratedWorkouts")
                .child(userId);

        ref.addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot snapshot) {
                List<AutoGeneratedWorkout> allWorkouts = new ArrayList<>();
                for (DataSnapshot ds : snapshot.getChildren()) {
                    AutoGeneratedWorkout w = ds.getValue(AutoGeneratedWorkout.class);
                    if (w != null) {
                        allWorkouts.add(w);
                    }
                }

                // Сортировка тренировок по дате (от новых к старым)
                Collections.sort(allWorkouts, new Comparator<AutoGeneratedWorkout>() {
                    @Override
                    public int compare(AutoGeneratedWorkout w1, AutoGeneratedWorkout w2) {
                        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
                        try {
                            Date date1 = dateFormat.parse(w1.getDate());
                            Date date2 = dateFormat.parse(w2.getDate());
                            return date2.compareTo(date1); // Сортировка по убыванию (новые первые)
                        } catch (ParseException e) {
                            Log.e("HomeActivity", "Date parse error: " + e.getMessage());
                            return 0;
                        }
                    }
                });

                // Выбираем по одной последней тренировке для каждой группы мышц
                Map<String, AutoGeneratedWorkout> latestWorkoutsByMuscleGroup = new HashMap<>();
                for (AutoGeneratedWorkout workout : allWorkouts) {
                    String muscleGroup = determineMuscleGroup(workout.getSuggestedWorkout());
                    if (!latestWorkoutsByMuscleGroup.containsKey(muscleGroup)) {
                        latestWorkoutsByMuscleGroup.put(muscleGroup, workout);
                    }
                }

                // Обновляем список тренировок
                workouts.clear();
                workouts.addAll(latestWorkoutsByMuscleGroup.values());

                // Ограничиваем до 3 тренировок (если нужно)
                if (workouts.size() > 3) {
                    workouts = new ArrayList<>(workouts.subList(0, 3));
                }

                workoutAdapter.notifyDataSetChanged();
            }

            @Override
            public void onCancelled(DatabaseError error) {
                Log.e("HomeActivity", "Failed to load workouts: " + error.getMessage());
            }
        });
    }

    private String determineMuscleGroup(String suggestedWorkout) {
        if (suggestedWorkout.toLowerCase().contains("push-ups") || suggestedWorkout.toLowerCase().contains("bench press")) {
            return "Chest";
        } else if (suggestedWorkout.toLowerCase().contains("pull-ups") || suggestedWorkout.toLowerCase().contains("deadlifts")) {
            return "Back";
        } else if (suggestedWorkout.toLowerCase().contains("bicep curls") || suggestedWorkout.toLowerCase().contains("tricep dips")) {
            return "Arms";
        } else if (suggestedWorkout.toLowerCase().contains("squats") || suggestedWorkout.toLowerCase().contains("lunges")) {
            return "Legs";
        } else if (suggestedWorkout.toLowerCase().contains("plank") || suggestedWorkout.toLowerCase().contains("crunches")) {
            return "Abs";
        } else if (suggestedWorkout.toLowerCase().contains("shoulder press") || suggestedWorkout.toLowerCase().contains("lateral raises")) {
            return "Shoulders";
        } else {
            return "Full Body";
        }
    }

    private void setupPopularGoals() {
        GridLayout gridLayout = findViewById(R.id.popular_goals_grid);
        gridLayout.removeAllViews();

        String[] goals = {"Сжигание веса", "Набор массы", "Поддержка формы", "Сжигание веса", "Набор массы", "Поддержка формы"};
        int[] goalImages = {
                R.drawable.ic_fat_burning,
                R.drawable.ic_muscle_gain,
                R.drawable.ic_maintain_shape,
                R.drawable.ic_fat_burning,
                R.drawable.ic_muscle_gain,
                R.drawable.ic_maintain_shape
        };

        for (int i = 0; i < goals.length; i++) {
            View goalView = LayoutInflater.from(this).inflate(R.layout.item_goal_card, gridLayout, false);
            TextView goalTitle = goalView.findViewById(R.id.goal_title);
            ImageView goalImage = goalView.findViewById(R.id.goal_image);

            // Устанавливаем данные
            goalTitle.setText(goals[i]);
            try {
                goalImage.setImageResource(goalImages[i]);
            } catch (Exception e) {
                Log.e("HomeActivity", "Failed to load goal image resource: " + goalImages[i], e);
                goalImage.setImageResource(android.R.drawable.ic_menu_gallery); // Заглушка
            }

            // Настройка GridLayout
            GridLayout.Spec rowSpec = GridLayout.spec(i / 2);
            GridLayout.Spec colSpec = GridLayout.spec(i % 2, 1f); // Вес 1f для равномерного распределения
            GridLayout.LayoutParams params = new GridLayout.LayoutParams(rowSpec, colSpec);
            params.width = 0; // Ширина растягивается по весу
            params.height = GridLayout.LayoutParams.WRAP_CONTENT;
            params.setGravity(Gravity.FILL_HORIZONTAL);
            // Добавляем горизонтальные отступы между карточками (4dp слева и справа)
            params.setMargins(4, 0, 4, 0);
            goalView.setLayoutParams(params);

            // Обработчик нажатия на карточку
            int finalI = i;
            goalView.setOnClickListener(v -> {
                Intent intent = new Intent(HomeActivity.this, GoalRecommendationsActivity.class);
                intent.putExtra("GOAL_TYPE", goals[finalI]);
                intent.putExtra("CARD_INDEX", finalI); // Передаем индекс карточки
                startActivity(intent);
            });

            gridLayout.addView(goalView);
        }
    }

}

